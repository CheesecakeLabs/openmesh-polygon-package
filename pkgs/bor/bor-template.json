{
  "name": "Bor (Polygon)",
  "desc": "Bor is the Ethereum-compatible client of the Polygon network.",
  "nixName": "bor",
  "specs": {
    "ram": 16384,
    "storage": 4194304
  },
  "tags": ["RPC", "Validator", "Blockchain", "Polygon"],
  "website": "https://polygon.technology/",
  "logo": "https://polygon.technology/favicon.ico",
  "options": [
    {
      "name": "<name>.devfakeauthor",
      "desc": "Run miner without validator set authorization [dev mode].",
      "nixName": "<name>.devfakeauthor",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "<name>.heimdall",
      "desc": "URL of Heimdall service.",
      "nixName": "<name>.heimdall",
      "type": "string",
      "value": "http://localhost:1317"
    },
    {
      "name": "<name>.heimdallgRPC",
      "desc": "Address of Heimdall gRPC service.",
      "nixName": "<name>.heimdallgRPC",
      "type": "string",
      "value": "null"
    },
    {
      "name": "<name>.logs",
      "desc": "Enables Bor log retrieval.",
      "nixName": "<name>.logs",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "<name>.runheimdall",
      "desc": "Run Heimdall service as a child process.",
      "nixName": "<name>.runheimdall",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "<name>.runheimdallargs",
      "desc": "Arguments to pass to Heimdall service.",
      "nixName": "<name>.runheimdallargs",
      "type": "null or (list of string)",
      "value": "null"
    },
    {
      "name": "<name>.useheimdallapp",
      "desc": "Use child heimdall process to fetch data, only works when runheimdall is true.",
      "nixName": "<name>.useheimdallapp",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "<name>.withoutheimdall",
      "desc": "Run without Heimdall service (for testing purpose).",
      "nixName": "<name>.withoutheimdall",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "<name>.chain",
      "desc": "Name of the chain to sync ('amoy', 'mumbai', 'mainnet') or path to a genesis file.",
      "nixName": "<name>.chain",
      "type": "string",
      "value": "mainnet"
    },
    {
      "name": "<name>.config",
      "desc": "Path to the TOML configuration file.",
      "nixName": "<name>.config",
      "type": "string",
      "value": "/path/to/config.toml"
    },
    {
      "name": "<name>.datadir",
      "desc": "Path of the data directory to store information.",
      "nixName": "<name>.datadir",
      "type": "string",
      "value": "/var/lib/bor"
    },
    {
      "name": "<name>.datadirAncient",
      "desc": "Data directory for ancient chain segments.",
      "nixName": "<name>.datadirAncient",
      "type": "string",
      "value": "/var/lib/bor/ancient"
    },
    {
      "name": "<name>.dbEngine",
      "desc": "Backing database implementation to use ('leveldb' or 'pebble').",
      "nixName": "<name>.dbEngine",
      "type": "string",
      "value": "leveldb"
    },
    {
      "name": "<name>.dev",
      "desc": "Enable developer mode with ephemeral proof-of-authority network.",
      "nixName": "<name>.dev",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "<name>.devGasLimit",
      "desc": "Initial block gas limit in developer mode.",
      "nixName": "<name>.devGasLimit",
      "type": "integer",
      "value": 11500000
    },
    {
      "name": "<name>.devPeriod",
      "desc": "Block period to use in developer mode (0 = mine only if transaction pending).",
      "nixName": "<name>.devPeriod",
      "type": "integer",
      "value": 0
    },
    {
      "name": "<name>.disableBorWallet",
      "desc": "Disable the personal wallet endpoints.",
      "nixName": "<name>.disableBorWallet",
      "type": "boolean",
      "value": "true"
    },
    {
      "name": "<name>.ethRequiredBlocks",
      "desc": "Comma separated block number-to-hash mappings to require for peering.",
      "nixName": "<name>.ethRequiredBlocks",
      "type": "string",
      "value": null
    },
    {
      "name": "<name>.ethstats",
      "desc": "Reporting URL of an ethstats service.",
      "nixName": "<name>.ethstats",
      "type": "string",
      "value": null
    },
    {
      "name": "<name>.gcmode",
      "desc": "Blockchain garbage collection mode.",
      "nixName": "<name>.gcmode",
      "type": "string",
      "value": "full"
    },
    {
      "name": "<name>.gpoBlocks",
      "desc": "Number of recent blocks to check for gas prices.",
      "nixName": "<name>.gpoBlocks",
      "type": "integer",
      "value": 20
    },
    {
      "name": "<name>.gpoIgnorePrice",
      "desc": "Gas price below which gpo will ignore transactions.",
      "nixName": "<name>.gpoIgnorePrice",
      "type": "integer",
      "value": 25000000000
    },
    {
      "name": "<name>.gpoMaxBlockHistory",
      "desc": "Maximum block history of gas price oracle.",
      "nixName": "<name>.gpoMaxBlockHistory",
      "type": "integer",
      "value": 1024
    },
    {
      "name": "<name>.gpoMaxHeaderHistory",
      "desc": "Maximum header history of gas price oracle.",
      "nixName": "<name>.gpoMaxHeaderHistory",
      "type": "integer",
      "value": 1024
    },
    {
      "name": "<name>.gpoMaxPrice",
      "desc": "Maximum gas price will be recommended by gpo.",
      "nixName": "<name>.gpoMaxPrice",
      "type": "integer",
      "value": 500000000000
    },
    {
      "name": "<name>.gpoPercentile",
      "desc": "Suggested gas price is the given percentile of a set of recent transaction gas prices.",
      "nixName": "<name>.gpoPercentile",
      "type": "integer",
      "value": 60
    },
    {
      "name": "<name>.grpcAddr",
      "desc": "Address and port to bind the GRPC server.",
      "nixName": "<name>.grpcAddr",
      "type": "string",
      "value": ":3131"
    },
    {
      "name": "<name>.identity",
      "desc": "Name/Identity of the node.",
      "nixName": "<name>.identity",
      "type": "string",
      "value": "PolygonNode"
    },
    {
      "name": "<name>.keystore",
      "desc": "Path of the directory where keystores are located.",
      "nixName": "<name>.keystore",
      "type": "string",
      "value": "/var/lib/bor/keystore"
    },
    {
      "name": "<name>.logLevel",
      "desc": "Log level for the server (trace|debug|info|warn|error|crit).",
      "nixName": "<name>.logLevel",
      "type": "string",
      "value": "info"
    },
    {
      "name": "<name>.parallelevmEnable",
      "desc": "Enable Block STM.",
      "nixName": "<name>.parallelevmEnable",
      "type": "boolean",
      "value": "true"
    },
    {
      "name": "<name>.parallelevmProcs",
      "desc": "Number of speculative processes (cores) in Block STM.",
      "nixName": "<name>.parallelevmProcs",
      "type": "integer",
      "value": 8
    },
    {
      "name": "<name>.pprof",
      "desc": "Enable the pprof HTTP server.",
      "nixName": "<name>.pprof",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "<name>.pprofAddr",
      "desc": "pprof HTTP server listening interface.",
      "nixName": "<name>.pprofAddr",
      "type": "string",
      "value": "127.0.0.1"
    },
    {
      "name": "<name>.pprofBlockProfileRate",
      "desc": "Turn on block profiling with the given rate.",
      "nixName": "<name>.pprofBlockProfileRate",
      "type": "integer",
      "value": 0
    },
    {
      "name": "<name>.pprofMemProfileRate",
      "desc": "Turn on memory profiling with the given rate.",
      "nixName": "<name>.pprofMemProfileRate",
      "type": "integer",
      "value": 524288
    },
    {
      "name": "<name>.pprofPort",
      "desc": "pprof HTTP server listening port.",
      "nixName": "<name>.pprofPort",
      "type": "integer",
      "value": 6060
    },
    {
      "name": "<name>.snapshot",
      "desc": "Enables the snapshot-database mode.",
      "nixName": "<name>.snapshot",
      "type": "boolean",
      "value": "true"
    },
    {
      "name": "<name>.stateScheme",
      "desc": "Scheme to use for storing ethereum state ('hash' or 'path').",
      "nixName": "<name>.stateScheme",
      "type": "string",
      "value": "hash"
    },
    {
      "name": "<name>.syncmode",
      "desc": "Blockchain sync mode (only 'full' sync supported by Bor).",
      "nixName": "<name>.syncmode",
      "type": "string",
      "value": "full"
    },
    {
      "name": "<name>.verbosity",
      "desc": "Logging verbosity for the server (5=trace|4=debug|3=info|2=warn|1=error|0=crit).",
      "nixName": "<name>.verbosity",
      "type": "integer",
      "value": 3
    },
    {
      "name": "<name>.vmdebug",
      "desc": "Record information useful for VM and contract debugging.",
      "nixName": "<name>.vmdebug",
      "type": "boolean",
      "value": "false"
    }
  ]
}
